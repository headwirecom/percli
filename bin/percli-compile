#!/usr/bin/env node

const args    = require('commander')
const process = require('process')
const fs	  = require('fs')
const path	  = require('path')
const maven	  = require('maven')
const watch   = require('node-watch');
const ignore  = require('ignore')

args.version(require('../package.json').version)
	.option('-w, --watch', 'watch project and recompile')
    .option('-d, --deploy', 'deploy to server')
	.parse(process.argv)

/*
The prepareParamObject function will prepare the parameters object that
will be consumed by mvn.execute e.g. mvn.execute(commands, parameters);

Sample command to pass parameters in compile task
percli compile -d sling.port=8445 sling.username=mainadmin
*/
var parameters = {};
prepareParamObject();

function prepareParamObject() {
  Object.entries(args.args).forEach(entry => {
    let value = entry[1];
    var splitParameter = value.split("=");
    parameters[splitParameter[0]] = splitParameter[1]
  });
}

function findProjectRoot(folder) {
	const pom = folder + '/pom.xml'
	if(fs.existsSync(pom)) {
		return folder
	}
	const parent = path.normalize(folder+'/..').toString()
	if(parent === folder) return null
	return findProjectRoot(parent)
}

function findCommonRoot(path1, path2) {

var rel = path.relative(path1, path2)

var segments = rel.split(path.sep)
for(let i = 0; i < segments.length && segments[i] === '..'; i++) {

	path2 = path.join(path2, '..')

}
	return path2
}

let compiling = false

function compile(files) {
    let shortest = files[0]
    for(let i = 1; i < files.length; i++) {
        let item = files[i]
        if(item.startsWith(shortest)) {
            // ignore, already shorter
        } else if(shortest.startsWith(item)) {
            shortest = item
        } else {
            shortest = findCommonRoot(shortest, item)
        }
    }
    console.log('shortest path', shortest)
    build(shortest)
    compiling = false
}


function build(dir) {
    const projectFolder = findProjectRoot(dir)
    const projectRoot = projectFolder.replace(/\\/g, '/')
    if(projectRoot) {
        console.log('found pom at', projectRoot)
        const mvn = maven.create( { cwd: projectRoot })
        if(args.deploy) {
            const folderName = projectRoot.split('/').pop()
            if(folderName === 'core') {
                mvn.execute(['clean', 'install', '-PautoInstallBundle'], parameters)
            } else {
                mvn.execute(['clean', 'install', '-PautoInstallPackage'], parameters)
            }
        } else {
            mvn.execute(['clean', 'install'], parameters)
        }
    }
}

if(!args.watch) {
    console.log('compiling project')

    build(process.cwd())
} else {

    let files = []
    const compiler = function() {

        if(files.length > 0 && !compiling) {
            compiling = true
            let processing = JSON.parse(JSON.stringify(files))
            files = []
            console.log('time to compile', processing)
            compile(processing)
            compiling = false
        }
        setTimeout(function () {
            compiler()
        }, 5000)
    }
    setTimeout(function () {
        compiler()
    }, 5000)

    const ignoreFile = fs.readFileSync('.gitignore').toString();
    console.log(ignoreFile)
    const gitignore = ignore()
        .add(ignoreFile).add('.git').add('.gitignore')

    watch('.', { recursive: true }, function(evt, name) {
        try {
//            console.log(evt, name, fs.statSync(name).isDirectory())
            if(!compiling && !fs.statSync(name).isDirectory()) {
                if(!gitignore.ignores(name)) {
                    files.push(name)
                    console.log('>>>>>>>>>>>>>>>>>', evt, name)
                }
            }
        } catch(error) {
            console.error('failed to handle file', name, error)
        }
    });
}
