#!/usr/bin/env node

const args = require('commander')
const { startPeregrine, setPort, getPathForServer, addServer, pathRegistered, promptAddServer }  = require('../lib/tasks')
const { peregrineBanner } = require('../lib/banner.js')
const fs = require('fs')
const path = require('path')

args.version('1.0.0')
    .option('-a, --author', 'start as author')
    .option('-s, --standalone', 'start as standalone')
    .option('-p, --publish', 'start as publish')
    .option('-d, --debug [port]', 'start with debugging enabled and optional port', '30303')
    .option('-u, --suspend [port]', 'start with suspended debugging enabled and option port', '30303')
    .option('-n, --name [name]', 'start server by name')
    .description("Starts a Peregrine Server instance that's already installed\n\n" +
        "Note: if a suspended debugging session is cancelled before Peregrine is started it needs to be manually stopped")
    .parse(process.argv)

async function serverStart(type, debugging, debugPort, suspended){
    await peregrineBanner()
    try {
        await startPeregrine(type, debugging, debugPort, suspended)
    } catch(error) {
        console.error(error);
    }
}

async function runPromptAndStart(type, debugging, debugPort, suspended) {
    await peregrineBanner()
    const inputName = await promptAddServer(process.cwd())
    try {
        await startPeregrine(type, debugging, debugPort, suspended)
        if (!getPathForServer(inputName)) {
            addServer(inputName, process.cwd())
            console.log('Registering server '+inputName+' to path: '+process.cwd())
        }
    } catch(error) {
        console.error(error);
    }
}

debugging = false
suspended = false
if(args.debug) {
    if(args.debug === true) {
        debugPort = "30303";
    } else {
        debugPort = args.debug
    }
    debugging = true;
}
if(args.suspend) {
    if(args.suspend === true) {
        debugPort = "30303";
    } else {
        debugPort = args.suspend
    }
    debugging = true;
    suspended = true
}

if(typeof args.name === 'string') {
    const serverName = args.name
    if (!getPathForServer(serverName)) {
        addServer(serverName, process.cwd())
        console.log('Registering server '+serverName+' to path: '+process.cwd())
    }
    const serverPath = getPathForServer(args.name)
    if(serverPath) {
        try {
            let port = getSlingPort(path.join(serverPath, 'sling', 'sling.properties'))
            setPort(port)
            process.chdir(serverPath)
            serverStart('standalone', debugging, debugPort, suspended)
        } catch(err) {
            console.error('server at path',serverPath,'does not exist')
        }
    } else {
        console.error('no server found with name', args.name)
    }
} else if (pathRegistered(process.cwd())) {
    if(args.author) {
        serverStart('author', debugging, debugPort, suspended)
    } else if(args.publish) {
        setPort(8180)
        serverStart('publish', debugging, debugPort, suspended)
    } else {
        let port = getSlingPort(path.join('sling', 'sling.properties'))
        setPort(port)
        serverStart('standalone', debugging, debugPort, suspended)
    }
} else {

    if(args.author) {
        runPromptAndStart('author', debugging, debugPort, suspended)
    } else if(args.publish) {
        setPort(8180)
        runPromptAndStart('publish', debugging, debugPort, suspended)
    } else {
        runPromptAndStart('standalone', debugging, debugPort, suspended)
    }
}

function getSlingPort(slingPropertiesPath) {
  let port = 8080
  try {
      const file = fs.readFileSync(slingPropertiesPath).toString()
      lines = file.split(/[\n\r]/)
      for(let i = 0; i < lines.length; i++) {
          if(lines[i].startsWith('org.osgi.service.http.port=')) {
              const prop = lines[i].split('=')
              port = prop[1]
          }
      }
  } catch(err) {
      console.log('Unable to fetch the sling.properties file, thus using the default port as 8080')
  }
  return port
}
